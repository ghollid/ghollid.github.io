cores
cluster <- makeCluster(cores-1)
cluster <- makeCluster(cores-1)
clusterEvalQ(cluster,library(tidyverse))
clusterExport(cluster,list("fun"))
parApply(cl=cluster,X,FUN = fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
parLapply(cl=cluster,X,FUN = fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
parApply(cl=cluster,X,FUN = fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
reject2 <- function(tobs, n, alpha, direction){
df <- n-1
if(direction == "left"){
crit <- qt(alpha, df, lower.tail=TRUE)
return(tobs<=crit)
}
if(direction == "right"){
crit <- qt(alpha,df,lower.tail=FALSE)
return(tobs>=crit)
}
if(direction == "two-sided"){
crit <- qt(alpha,df,lower.tail=FALSE)
return(abs(tobs)>=crit)
}
}
fun <- function(n, shape,rate=1){
mces <- replicate(10000,reject2(teststat(rgamma(n,shape=shape,rate=rate),shape*rate),
n, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
# establishing clusters
library('parallel')
cores <- detectCores()
cores
cluster <- makeCluster(cores-1)
cluster <- makeCluster(cores-1)
clusterEvalQ(cluster,library(tidyverse))
clusterExport(cluster,list("fun"))
clusterExport(cluster,list("fun"))
parApply(cl=cluster,X,FUN = fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
?parLapply
# using apply NOT lapply
X <- expand.grid(list(ss,shapes))
X <- apply(X,1,as.list)
reject2 <- function(tobs, n, alpha, direction){
df <- n-1
if(direction == "left"){
crit <- qt(alpha, df, lower.tail=TRUE)
return(tobs<=crit)
}
if(direction == "right"){
crit <- qt(alpha,df,lower.tail=FALSE)
return(tobs>=crit)
}
if(direction == "two-sided"){
crit <- qt(alpha,df,lower.tail=FALSE)
return(abs(tobs)>=crit)
}
}
fun <- function(n, shape,rate=1){
mces <- replicate(10000,reject2(teststat(rgamma(n,shape=shape,rate=rate),shape*rate),
n, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
# establishing clusters
library('parallel')
cores <- detectCores()
cores
cluster <- makeCluster(cores-1)
cluster <- makeCluster(cores-1)
clusterEvalQ(cluster,library(tidyverse))
clusterExport(cluster,list("fun"))
parApply(cl=cluster,X,FUN = fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
parApply(cl=cluster,X,fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
parApply(cl=cluster,X,FUN = fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
parLapply(cl=cluster,X, fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
parLapply(cl=cluster,X, fun)
clusterExport(cluster,list("fun","reject2"))
parLapply(cl=cluster,X, fun)
clusterExport(cluster,list("fun","reject2"))
parLapply(cl=cluster,X, fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
?Lapply
?lapply
# using apply NOT lapply
X <- expand.grid(list(ss,shapes))
View(X)
X <- lapply(X,1,as.list)
X <- lapply(X,as.list)
X <- apply(X,1,as.list)
# using apply NOT lapply
X <- expand.grid(list(ss,shapes))
X <- apply(X,1,as.list)
View(X)
fun <- function(Var1, Var2,rate=1){
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
clusterExport(cluster,list("fun","reject2"))
parLapply(cl=cluster,X, fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
parApply(cl=cluster,X, fun(n=sapply(X,"[[",1),shape=sapply(X,"[[",2),
rate=1))
parApply(cl=cluster,X, fun)
parApply(cl=cluster,X, FUN=fun)
tobs <- [1,2,3,4,5]
tobs <- list(1,2,3,4,5,6)
crit <- 3
(tobs < crit)
result <- (tobs < crit)
result
# using apply NOT lapply
X <- expand.grid(list(ss,shapes))
X <- lapply(X, fun)
X
X[[1]]
X[1]
X[2]
X
# using apply NOT lapply
X <- expand.grid(list(ss,shapes))
X <- apply(X,1,as.list)
X
X <- lapply(X, fun)
X <- lapply(1:X, fun)
X <- lapply(X, fun)
fun <- function(Var1, Var2,rate=1){
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
X <- lapply(X, fun)
Var2
fun <- function(Var1, Var2,rate=1){
Var1
Var2
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
X <- lapply(X, fun)
# using apply NOT lapply
X <- expand.grid(list(ss,shapes))
X <- apply(X,1,as.list)
X <- lapply(X, fun)
X <- lapply(1:k, fun, data=X)
length(X)
X <- lapply(1:length(X), fun, data=X)
?parLapply
parLapply(cl=cluster,X=1:length(X), FUN=fun,data=X)
parLapply(cl=cluster,X=1:length(X), fun,data=X)
parLapply(cl=cluster,X=1:length(X), fun)
fun <- function(Var1, Var2,rate=1){
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
# establishing clusters
library('parallel')
cores <- detectCores()
cores
cluster <- makeCluster(cores-1)
cluster <- makeCluster(cores-1)
clusterEvalQ(cluster,library(tidyverse))
clusterExport(cluster,list("fun","reject2"))
clusterExport(cluster,list("fun","reject2"))
parLapply(cl=cluster,X=1:length(X), fun)
teststat <- function(data,mean){
ybar <- mean(data)
s <- sd(data)
n <- length(data)
tobs <- (ybar-mean)/(s/sqrt(n))
return(tobs)
}
parLapply(cl=cluster,X=1:length(X), fun)
parLapply(cl=cluster,X=1:length(X), fun)
clusterExport(cluster,list("fun","reject2","teststat"))
parLapply(cl=cluster,X=1:length(X), fun)
print(Var1,Var2)
fun <- function(Var1, Var2,rate=1){
print(Var1,Var2)
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
clusterExport(cluster,list("fun","reject2","teststat"))
parLapply(cl=cluster,X=1:length(X), fun)
parLapply(cl=cluster,X, fun)
fun <- function(Var1, Var2=Var1[2],rate=1){
print(Var1,Var2)
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
clusterExport(cluster,list("fun","reject2","teststat"))
parLapply(cl=cluster,X, fun)
fun <- function(x, Var1=x[,1], Var2=x[,2],rate=1){
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
clusterExport(cluster,list("fun","reject2","teststat"))
parLapply(cl=cluster,X, fun)
X[,1]
X[1]
X[1]$Var1
X[[1]]
X[[1]][1]
fun <- function(x,rate=1,data=X){
Var1 = data[[x]][1]
Var2 = data[[x]][2]
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
clusterExport(cluster,list("fun","reject2","teststat"))
parLapply(cl=cluster,X=1:length(X), fun,data=X)
1:length(X)
class(1:length(X))
parLapply(cl=cluster,X=list(1:length(X)), fun,data=X)
parLapply(cl=cluster,X=1:length(X), fun,data=X)
fun <- function(x,rate=1,data){
Var1 = data[[x]][1]
Var2 = data[[x]][2]
print(Var1,Var2)
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
clusterExport(cluster,list("fun","reject2","teststat"))
parLapply(cl=cluster,X=1:length(X), fun,data=X)
fun <- function(x,rate=1,data){
Var1 = data[[x]][1]
Var2 = data[[x]][2]
print(paste(Var1,Var2))
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
clusterExport(cluster,list("fun","reject2","teststat"))
parLapply(cl=cluster,X=1:length(X), fun,data=X)
parLapply(cl=cluster,1:length(X), fun,data=X)
clusterExport(cluster,list("fun","reject2","teststat",X))
class(X[[1]][1])
class(as.numeric(X[[1]][1]))
fun <- function(x,rate=1,data){
Var1 = as.numeric(data[[x]][1])
Var2 = as.numeric(data[[x]][2])
print(paste(Var1,Var2))
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
clusterExport(cluster,list("fun","reject2","teststat"))
parLapply(cl=cluster,1:length(X), fun,data=X)
xyz <- parLapply(cl=cluster,1:length(X), fun,data=X)
View(xyz)
View(xyz)
n <- c(10,20,30,50,100)
parResults = data.frame(nrows=5,ncols=6)
unlist(x)
unlist(X)
X <- expand.grid(list(ss,shapes))
unlist(xyz)
parResults = data.frame(expand.grid(list(ss,shapes)))
View(parResults)
View(parResults)
parResults$results <- unlist(xyz)
colnames(parResults)[1] <- "n"
colnames(parResults)[2] <- "Shape"
parResults
```{r,echo=TRUE}
data <- c(10,20,30,34,35,11,23,32,50)
teststat <- function(data,mean){
ybar <- mean(data)
s <- sd(data)
n <- length(data)
tobs <- (ybar-mean)/(s/sqrt(n))
return(tobs)
}
teststat(data,34)
tobs <- teststat(data,34)
reject <- function(tobs, n, alpha, direction){
df <- n-1
if(direction == "left"){
crit <- qt(alpha, df, lower.tail=TRUE)
if(tobs<=crit){
return("TRUE")
}
else{
return("FALSE")
}
}
if(direction == "right"){
crit <- qt(alpha,df,lower.tail=FALSE)
if (tobs>=crit){
return("TRUE")
}else{
return("FALSE")
}
}
if(direction == "two-sided"){
crit <- qt(alpha,df,lower.tail=FALSE)
if (abs(tobs)>=crit){
return("TRUE")
}else{
return("FALSE")
}
}
}
## First, sepal length equal to 5.5
tobssl <- teststat((iris$Sepal.Length),5.5)
reject(tobssl,length(iris$Sepal.Length),0.05,"two-sided")
## Next, sepal width greater than 3.5
tobssw <- teststat((iris$Sepal.Width),3.5)
reject(tobssw, length(iris$Sepal.Width),0.05,"right")
## Finally, petal length less than 4
tobspl <- teststat((iris$Petal.Length),4)
reject(tobspl,length(iris$Petal.Length),0.05,"left")
n <- 10
shape <- 0.5
rate <- 1
mces <- replicate(10000,reject( teststat(rgamma(n,shape=0.5,rate=1),shape*rate),
n, alpha=0.05, "two-sided"))
mces <- replicate(10000,reject( teststat(rgamma(n,shape=0.5,rate=1),shape*rate),
n, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
mean <- count$freq[2]/count$freq[1]
mean
n <- 10
shape <- 0.5
rate <- 1
mces <- replicate(10000,reject( teststat(rgamma(n,shape=0.5,rate=1),shape*rate),
n, alpha=0.05, "two-sided"))
mces <- replicate(10000,reject( teststat(rgamma(n,shape=0.5,rate=1),shape*rate),
n, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
count <- plyr::count(mces)
mean <- count$freq[2]/count$freq[1]
mean
ss <- c(10,20,30,50,100)
shapes <- c(0.5,1,2,5,10,20)
rate <- 1
# using apply NOT lapply
X <- expand.grid(list(ss,shapes))
X <- apply(X,1,as.list)
X <- lapply(1:length(X), fun, data=X)
data <- c(10,20,30,34,35,11,23,32,50)
teststat <- function(data,mean){
ybar <- mean(data)
s <- sd(data)
n <- length(data)
tobs <- (ybar-mean)/(s/sqrt(n))
return(tobs)
}
teststat(data,34)
tobs <- teststat(data,34)
reject <- function(tobs, n, alpha, direction){
df <- n-1
if(direction == "left"){
crit <- qt(alpha, df, lower.tail=TRUE)
if(tobs<=crit){
return("TRUE")
}
else{
return("FALSE")
}
}
if(direction == "right"){
crit <- qt(alpha,df,lower.tail=FALSE)
if (tobs>=crit){
return("TRUE")
}else{
return("FALSE")
}
}
if(direction == "two-sided"){
crit <- qt(alpha,df,lower.tail=FALSE)
if (abs(tobs)>=crit){
return("TRUE")
}else{
return("FALSE")
}
}
}
## First, sepal length equal to 5.5
tobssl <- teststat((iris$Sepal.Length),5.5)
reject(tobssl,length(iris$Sepal.Length),0.05,"two-sided")
## Next, sepal width greater than 3.5
tobssw <- teststat((iris$Sepal.Width),3.5)
reject(tobssw, length(iris$Sepal.Width),0.05,"right")
## Finally, petal length less than 4
tobspl <- teststat((iris$Petal.Length),4)
reject(tobspl,length(iris$Petal.Length),0.05,"left")
n <- 10
shape <- 0.5
rate <- 1
mces <- replicate(10000,reject( teststat(rgamma(n,shape=0.5,rate=1),shape*rate),
n, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
mean <- count$freq[2]/count$freq[1]
mean
ss <- c(10,20,30,50,100)
shapes <- c(0.5,1,2,5,10,20)
rate <- 1
reject2 <- function(tobs, n, alpha, direction){
df <- n-1
if(direction == "left"){
crit <- qt(alpha, df, lower.tail=TRUE)
return(tobs<=crit)
}
if(direction == "right"){
crit <- qt(alpha,df,lower.tail=FALSE)
return(tobs>=crit)
}
if(direction == "two-sided"){
crit <- qt(alpha,df,lower.tail=FALSE)
return(abs(tobs)>=crit)
}
}
fun <- function(x,rate=1,data){
Var1 = as.numeric(data[[x]][1])
Var2 = as.numeric(data[[x]][2])
print(paste(Var1,Var2))
mces <- replicate(10000,reject2(teststat(rgamma(Var1,shape=Var2,rate=rate),Var2*rate),
Var1, alpha=0.05, "two-sided"))
count <- plyr::count(mces)
alpha <- count$freq[2]/count$freq[1]
return(alpha)
}
# using apply NOT lapply
X <- expand.grid(list(ss,shapes))
X <- apply(X,1,as.list)
X <- lapply(1:length(X), fun, data=X)
# establishing clusters
library('parallel')
cores <- detectCores()
cores
cluster <- makeCluster(cores-1)
cluster <- makeCluster(cores-1)
clusterEvalQ(cluster,library(tidyverse))
cluster <- makeCluster(cores-1)
clusterEvalQ(cluster,library(tidyverse))
clusterExport(cluster,list("fun","reject2","teststat"))
xyz <- parLapply(cl=cluster,1:length(X), fun,data=X)
xyz <- parLapply(cl=cluster,1:length(X), fun,data=X)
parResults = data.frame(expand.grid(list(ss,shapes)))
parResults$results <- unlist(xyz)
colnames(parResults)[1] <- "n"
colnames(parResults)[2] <- "Shape"
parResults
View(xyz)
xyz <- parLapply(cl=cluster,1:length(X), fun,data=X)
View(xyz)
View(X)
# using apply NOT lapply
X <- expand.grid(list(ss,shapes))
X <- apply(X,1,as.list)
xyz <- parLapply(cl=cluster,1:length(X), fun,data=X)
View(xyz)
parResults = data.frame(expand.grid(list(ss,shapes)))
parResults$results <- unlist(xyz)
colnames(parResults)[1] <- "n"
colnames(parResults)[2] <- "Shape"
parResults
qf(0.05,2,18)
pf(0.05,2,18)
7/17
7/24
.06/10
1-.006
1.853-1.261
0.592/(17-20)
1.261/20
-.1973333/.06305
?qf
qf(0.05,17,20)
pf(0.05,17,20)
pf(-3.129791,17,20)
